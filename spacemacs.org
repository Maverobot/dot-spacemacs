#+TITLE: Spacemacs tangled user configuration
#+SETUPFILE: ./docs/theme-readtheorg.setup
#+STARTUP: headlines
#+STARTUP: nohideblocks
#+STARTUP: indent
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args:emacs-lisp :comments link

* Introduction
This is a org file where its code snippets will be read by ~spacemacs~ for ~user-init~ and ~user-config~. It is inspired by [[https://github.com/ralesi/spacemacs.org][spacemacs.org]].
* user-init
All code snippets under this section will be added to ~dotspacemacs//user-init~
function, which is
#+begin_quote
Initialization function for user code.

It is called immediately after
~dotspacemacs/init~, before layer configuration executes. This function is mostly
useful for variables that need to be set before packages are loaded. If you are
unsure, you should try in setting them in `dotspacemacs/user-config' first.
#+end_quote
** Locale
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq system-time-locale "C")
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq-default dotspacemacs-themes '(
                                      doom-monokai-pro
                                      spacemacs-dark
                                      doom-one
                                      doom-zenburn))
#+END_SRC
** ROS
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (defun spacemacs/update-ros-envs ()
    "Update all environment variables in `spacemacs-ignored-environment-variables'
  from their values currently sourced in the shell environment (e.g. .bashrc)"
    (interactive)
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-copy-envs spacemacs-ignored-environment-variables)
    (message "ROS environment copied successfully from shell"))


  ;; Ignore any ROS environment variables since they might change depending
  ;; on which catkin workspace is used. When a new catkin workspace is chosen
  ;; call `spacemacs/update-ros-envs' to update theses envs accordingly
  (setq-default spacemacs-ignored-environment-variables '("ROS_IP"
                                                          "PYTHONPATH"
                                                          "CMAKE_PREFIX_PATH"
                                                          "ROS_MASTER_URI"
                                                          "ROS_PACKAGE_PATH"
                                                          "ROSLISP_PACKAGE_DIRECTORIES"
                                                          "PKG_CONFIG_PATH"
                                                          "LD_LIBRARY_PATH"))
#+END_SRC
** Shell
Set shell to be ~bash~ explicitly because my default shell ~fish~ does not work along with spacemacs.
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq-default shell-file-name "/bin/bash")
#+END_SRC
** Layers
*** groovy
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq default-groovy-lsp-jar-path "~/.spacemacs.d/groovy-language-server-all.jar")
  (if (file-exists-p default-groovy-lsp-jar-path)
      (setq groovy-lsp-jar-path default-groovy-lsp-jar-path)
    (message (concat default-groovy-lsp-jar-path " does not exist")))
#+END_SRC
** Workarounds
*** Workaround for unsigned packages
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC
*** Acknowledge org-roam-v2
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq org-roam-v2-ack t)
#+END_SRC

* user-config
All code snippets under this section will be added to ~dotspacemacs//user-config~
function, which is
#+begin_quote
Configuration function for user code.

This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code.
#+end_quote
** IDE config
*** Apply ANSI Color codes for buffer and region
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun apply-ansi-color-codes-to-region (beginning end)
    "Apply ANSI color codes to the selected region."
    (interactive "r")
    (ansi-color-apply-on-region beginning end))

  (defun apply-ansi-color-codes-to-buffer ()
    "Apply ANSI color codes to the whole buffer."
    (interactive)
    (apply-ansi-color-codes-to-region (point-min) (point-max)))
#+END_SRC

*** Disable auto-indent in C/C++ mode after typing ~::~
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Disable electric indentation in C and C++ modes
  (defun my-disable-electric-indent-mode ()
    (setq-local c-electric-flag nil))

  ;; Hook this function to C mode and C++ mode
  (add-hook 'c-mode-hook 'my-disable-electric-indent-mode)
  (add-hook 'c++-mode-hook 'my-disable-electric-indent-mode)
#+END_SRC
*** MacOS
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ; Use Command key as meta in emacs
  (setq mac-option-key-is-meta nil
        mac-command-key-is-meta t
        mac-command-modifier 'meta
        mac-option-modifier 'none)
#+END_SRC
*** Prevent using UI dialogs for prompts
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq use-dialog-box nil)
#+END_SRC
*** ccls
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'ccls
    (setq ccls-root-files (add-to-list 'ccls-root-files "build/compile_commands.json" t))
    (setq ccls-sem-highlight-method 'font-lock)
    (setq ccls-initialization-options
          (list :cache (list :directory (file-truename (concat (file-name-as-directory spacemacs-cache-directory) ".ccls-cache")))
                :compilationDatabaseDirectory "build"))
    ;; Only set the specific ccls path if it exists
    (when (file-exists-p "~/.spacemacs.d/ccls/Release/ccls")
      (setq ccls-executable (file-truename "~/.spacemacs.d/ccls/Release/ccls"))))
#+END_SRC
*** cmake-ide
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; C++ build dir setting
  (put 'cmake-ide-dir 'safe-local-variable 'stringp)
  (put 'cmake-ide-make-command 'safe-local-variable 'stringp)
  (put 'cmake-ide-cmake-args 'safe-local-variable 'stringp)
#+END_SRC
*** company
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-j") 'company-select-next)
    (define-key company-active-map (kbd "C-k") 'company-select-previous))
#+END_SRC
*** lsp-ui
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(with-eval-after-load 'lsp-ui
  (define-key lsp-ui-peek-mode-map (kbd "C-j") 'lsp-ui-peek--select-next)
  (define-key lsp-ui-peek-mode-map (kbd "j") 'lsp-ui-peek--select-next)
  (define-key lsp-ui-peek-mode-map (kbd "C-k") 'lsp-ui-peek--select-prev)
  (define-key lsp-ui-peek-mode-map (kbd "k") 'lsp-ui-peek--select-prev))
#+END_SRC
*** popup
Use evil keybindings for selecting items in popup menus.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'popup
    (define-key popup-menu-keymap (kbd "C-j") 'popup-next)
    (define-key popup-menu-keymap (kbd "C-k") 'popup-previous))
#+END_SRC
*** dap
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))
  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))
#+END_SRC
*** flycheck
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'flycheck
    (setq flycheck-check-syntax-automatically '(save
                                                idle-buffer-switch
                                                mode-enabled)))
#+END_SRC
*** Indentation for web development
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun setup-web-dev-indent (n)
    ;; web development
    (setq coffee-tab-width n) ; coffeescript
    (setq javascript-indent-level n) ; javascript-mode
    (setq js-indent-level n) ; js-mode
    (setq js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
    (setq web-mode-markup-indent-offset n) ; web-mode, html tag in html file
    (setq web-mode-css-indent-offset n) ; web-mode, css in html file
    (setq web-mode-code-indent-offset n) ; web-mode, js code in html file
    (setq css-indent-offset n) ; css-mode
    )
  (setup-web-dev-indent 2)
#+END_SRC
*** groovy (Jenkinsfile)
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq groovy-indent-offset 2)
#+END_SRC
*** plantuml
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (when (fboundp 'plantuml-mode)
    (require 'org-src)
    ;; Enable plantuml-mode for all *.pu files by default
    (add-to-list 'auto-mode-alist '("\\.pu\\'" . plantuml-mode))
    (setq org-plantuml-jar-path plantuml-jar-path)
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
    )
#+END_SRC
*** nvm
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; TODO: use the default version instead of hard-coding the specific version
  (condition-case err
      (nvm-use "20")
    (error (message "Could not initialize nvm for emacs. %s" (error-message-string err))))
#+END_SRC
*** conf-mode
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (add-to-list 'auto-mode-alist '("\\.eds\\'" . conf-mode))
  (add-to-list 'auto-mode-alist '("\\.dcf\\'" . conf-mode))
#+END_SRC

*** ROS
**** helm-ros
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; ROS shortcut
  (spacemacs/set-leader-keys "ye" 'spacemacs/update-ros-envs)
  (spacemacs/declare-prefix "y" "ROS")
  (spacemacs/set-leader-keys "yy" 'helm-ros)

  (spacemacs/declare-prefix "yt" "ROS topics")
  (spacemacs/set-leader-keys "ytt" 'helm-ros-topics)
  (spacemacs/set-leader-keys "ytz" 'helm-ros-rostopic-hz)
  (spacemacs/set-leader-keys "yti" 'helm-ros-rostopic-info)

  (spacemacs/declare-prefix "yn" "ROS nodes")
  (spacemacs/set-leader-keys "yni" 'helm-ros-rosnode-info)
  (spacemacs/set-leader-keys "ynn" 'helm-ros-rosnode-list)
  (spacemacs/set-leader-keys "ynd" 'helm-ros-kill-node)
  (spacemacs/set-leader-keys "ynr" 'helm-ros-run-node)

  (spacemacs/set-leader-keys "ym" 'helm-ros-set-master-uri)
#+END_SRC
**** roslaunch-jump
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; TODO: load package lazily
  (use-package roslaunch-jump
    :defer 1
    :load-path "~/.spacemacs.d/private/roslaunch-jump")
#+END_SRC
**** company-roslaunch
Autocompletion config for launch files.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; TODO: load package lazily
  (use-package company-roslaunch
    :load-path "~/.spacemacs.d/private/company-roslaunch")
#+END_SRC
**** catkin-make
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package catkin-make
    :load-path "~/.spacemacs.d/private/catkin-make"
    :config (catkin-make-keybinding-setup))
#+END_SRC
*** Rust
**** Allow user input in the rust-run command
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (spacemacs/set-leader-keys-for-major-mode 'rustic-mode "cx" 'rustic-cargo-run-with-user-input)
  (defun rustic-cargo-run-with-user-input ()
    "Build and run Rust code."
    (interactive)
    (rustic-cargo-run)
    (let (
          (orig-win (selected-window))
          (run-win (display-buffer (get-buffer "*cargo-run*") nil 'visible))
          )
      (select-window run-win)
      (comint-mode)
      (read-only-mode 0)
      (select-window orig-win)
      )
    )
#+END_SRC

*** scad-mode
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package scad-mode
    :load-path "~/.spacemacs.d/private/scad-mode")
  (add-hook 'scad-mode-hook 'flymake-mode-on)
  (with-eval-after-load 'scad-mode
    (define-key scad-preview-mode-map (kbd "C-h") 'scad-preview-rotate-z-)
    (define-key scad-preview-mode-map (kbd "C-l") 'scad-preview-rotate-z+)
    (define-key scad-preview-mode-map (kbd "C-k") 'scad-preview-rotate-x-)
    (define-key scad-preview-mode-map (kbd "C-j") 'scad-preview-rotate-x+)
    (define-key scad-preview-mode-map (kbd "M-h") 'scad-preview-distance-)
    (define-key scad-preview-mode-map (kbd "M-l") 'scad-preview-distance+)
    (define-key scad-preview-mode-map (kbd "M-k") 'scad-preview-translate-z+)
    (define-key scad-preview-mode-map (kbd "M-j") 'scad-preview-translate-z-))
#+END_SRC
*** Style for linux kernel development
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Linux kernel development
  (defun c-lineup-arglist-tabs-only (ignored)
    "Line up argument lists by tabs, not spaces"
    (let* ((anchor (c-langelem-pos c-syntactic-element))
           (column (c-langelem-2nd-pos c-syntactic-element))
           (offset (- (1+ column) anchor))
           (steps (floor offset c-basic-offset)))
      (* (max steps 1)
         c-basic-offset)))

  (add-hook 'c-mode-common-hook
            (lambda ()
              ;; Add kernel style
              (c-add-style
               "linux-tabs-only"
               '("linux" (c-offsets-alist
                          (arglist-cont-nonempty
                           c-lineup-gcc-asm-reg
                           c-lineup-arglist-tabs-only))))))
  (add-hook 'c-mode-hook
            (lambda ()
              (let ((filename (buffer-file-name)))
                ;; Enable kernel mode for the appropriate files
                (when (and filename
                           ;; TODO: avoid the harded coded path
                           (string-match (expand-file-name "~/Dev/kernels")
                                         filename))
                  (setq indent-tabs-mode t)
                  (setq show-trailing-whitespace t)
                  (c-set-style "linux-tabs-only")))))

#+END_SRC

*** copilot
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq copilot-node-executable (executable-find "node"))

  (with-eval-after-load 'company
    ;; disable inline previews
    (delq 'company-preview-if-just-one-frontend company-frontends))

  ;; Keybindings
  (with-eval-after-load 'copilot
    (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "C-TAB") 'copilot-accept-completion-by-word)
    (define-key copilot-completion-map (kbd "C-<tab>") 'copilot-accept-completion-by-word))

  ;; Enable copilot mode in programming modes, markdown-mode and org-mode
  (add-hook 'prog-mode-hook 'copilot-mode)
  (add-hook 'markdown-mode-hook 'copilot-mode)
  (add-hook 'org-mode-hook 'copilot-mode)

  ;; Disable the warning message
  (add-hook 'copilot-mode-hook (lambda ()
                                 (setq-local copilot--indent-warning-printed-p t)))
#+END_SRC
*** tramp + clang-format
clang-format does not work properly when editing a file on a remote host or in a docker container with tramp.
See the issue here: https://github.com/kljohann/clang-format.el/issues/5

Here upon ~clang-format-region~ call, we first check if the file is on a remote host or in a docker container.
- If not, we call ~clang-format-region~ as usual.
- If yes, we first check if a file with the same path exists on the local disk.
  - If yes, we assume it as the input file name for ~clang-format-region~.
  - If not, we assume the input file is under the $HOME directory.

Depending on where the input file is assumed to be, ~clang-format~ will find the ~.clang-format~ file for
the formatting in a dominant parent directory of the assumed input file path.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun tramp-aware-clang-format (orig-fun start end &optional style assume-file-name)
    (unless assume-file-name
      (setq assume-file-name
            (if (file-remote-p buffer-file-name)
                (let ((maybe-existing-local-buffer-file-name (replace-regexp-in-string "/docker:[^:]+:" "" buffer-file-name)))
                  ;; If file `maybe-existing-local-buffer-file-name' exists on local disk, use it.
                  (if (file-exists-p maybe-existing-local-buffer-file-name)
                      maybe-existing-local-buffer-file-name
                    ;; Otherwise, use `buffer-file-name' as if it is under the $HOME directory.
                    (concat (getenv "HOME") "/" (file-name-nondirectory buffer-file-name))))
              buffer-file-name)))
    (message "assume-file-name: %s" assume-file-name)
    (apply orig-fun (list start end style assume-file-name)))

  (advice-add 'clang-format-region :around #'tramp-aware-clang-format)
#+END_SRC
*** Get current branch name in magit
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun magit-add-current-branch-name-to-kill-ring ()
    "Show the current branch in the echo-area and add it to the `kill-ring'."
    (interactive)
    (let ((branch (magit-get-current-branch)))
      (if branch
          (progn (kill-new branch)
                 (message "%s" branch))
        (user-error "There is not current branch"))))

  ; TODO: Move this keybinding from "Checkout" to "Do" section
  (with-eval-after-load 'magit
    (transient-insert-suffix 'magit-branch "b"
      '("k" "copy branch name" magit-add-current-branch-name-to-kill-ring)))
#+END_SRC
** Miscellaneous
*** ultra-scroll
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package ultra-scroll
  :init
  (setq scroll-conservatively 101 ; important!
        scroll-margin 0)
  :config
  (ultra-scroll-mode 1))
#+END_SRC
*** No title bar
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(add-to-list 'default-frame-alist '(undecorated-round . t))
#+END_SRC
*** cursor
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ; Display Emacs cursor in terminal as it would be in GUI
  ;; (global-term-cursor-mode)
#+END_SRC

*** ripgrep
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (custom-set-variables
   '(helm-ag-base-command "rg --no-heading")
   `(helm-ag-success-exit-status '(0 2)))
#+END_SRC
*** ~C-a~ for increasing number, ~C-x~ for descreasing number
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (evil-define-key 'normal global-map (kbd "C-a") 'evil-numbers/inc-at-pt)
  (evil-define-key 'normal global-map (kbd "C-x") 'evil-numbers/dec-at-pt)
#+END_SRC
*** Default python interpreter
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq python-shell-interpreter (executable-find "python3"))
#+END_SRC
*** Disable spacemacs buffer warnings
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq spacemacs-buffer--warnings nil)
#+END_SRC
*** Find this file
Create binding to spacemacs.org file
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun spacemacs/find-config-file ()
    (interactive)
    (find-file (concat dotspacemacs-directory "/spacemacs.org")))

  (spacemacs/set-leader-keys "fec" 'spacemacs/find-config-file)
#+END_SRC
*** ~-~ for going to the first non-blank position of the previous line
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (evil-define-key 'normal global-map (kbd "-") 'evil-previous-line-first-non-blank)
#+END_SRC
*** helm-swoop
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq helm-swoop-use-fuzzy-match t)
  (setq helm-swoop-use-line-number-face t)
#+END_SRC
*** Keybinding for Zoom in / out
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (define-key (current-global-map) (kbd "C-+") 'spacemacs/zoom-frm-in)
  (define-key (current-global-map) (kbd "C--") 'spacemacs/zoom-frm-out)
#+END_SRC
*** Kill frame when pressing ~SPC q q~
The reason for this is that I mainly use emacs as a daemon and I don't want to close the daemon by accident.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (spacemacs/set-leader-keys "qq" 'spacemacs/frame-killer)
#+END_SRC
*** Make ~w~ in vim mode move to end of the word (not stopped by ~_~)
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol))
#+END_SRC
*** Smooth scrolling
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Scroll one line at a time (less "jumpy" than defaults)
  (when (display-graphic-p)
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
          mouse-wheel-progressive-speed nil))
  (setq scroll-step 1
        scroll-margin 0
        scroll-conservatively 100000)
#+END_SRC
*** Transparency settings
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (spacemacs/set-leader-keys "tt" 'spacemacs/toggle-transparency)
  (add-hook 'after-make-frame-functions 'spacemacs/enable-transparency)
#+END_SRC
*** Turn on xclip-mode
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package xclip
    :config (xclip-mode t))
#+END_SRC
*** Use windows key as meta key
It is meant to avoid conflicts with i3wm, where I use ~alt~ as the meta key.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq x-super-keysym 'meta)
#+END_SRC
*** Visiting a file uses its truename as the visited-file name
E.g. when visiting a soft/hard link.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq find-file-visit-truename t)
#+END_SRC
*** Do not autosave undo history
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq undo-tree-auto-save-history nil)
#+END_SRC
*** Native compilation
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (when (and (fboundp 'native-comp-available-p)
             (native-comp-available-p))
    (message "Native compilation is available")
    (setq native-comp-async-report-warnings-errors nil))
#+END_SRC
** org-mode
*** Export code blocks with current theme
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun my/org-inline-css-hook (exporter)
    "Insert custom inline css to automatically set the
  background of code to whatever theme I'm using's background"
    (when (eq exporter 'html)
      (let* ((my-pre-bg (face-background 'default))
             (my-pre-fg (face-foreground 'default)))
        (setq
         org-html-head-extra
         (concat
          org-html-head-extra
          (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                  my-pre-bg my-pre-fg))))))

  (add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)
#+END_SRC
*** org-ai
#+BEGIN_SRC emacs-lisp :tangle user-config.el
    (use-package org-ai
      :ensure t
      :commands (org-ai-mode
                 org-ai-global-mode)
      :custom (org-ai-openai-api-token (auth-source-pick-first-password :host "api.openai.com"))
      :init
      (add-hook 'org-mode-hook #'org-ai-mode) ; enable org-ai in org-mode
      (org-ai-global-mode) ; installs global keybindings on C-c M-a
      :config
      (setq org-ai-default-chat-model "o3-mini")
      (org-ai-install-yasnippets)) ; if you are using yasnippet and want `ai` snippets  (require 'org-ai-talk)
#+END_SRC

*** org-pomodora
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Lower the volume of the sounds
  (setq org-pomodoro-audio-player "play")
  (setq org-pomodoro-finished-sound-args "-v 0.01")
  (setq org-pomodoro-long-break-sound-args "-v 0.01")
  (setq org-pomodoro-short-break-sound-args "-v 0.01")
#+END_SRC

*** org-agenda
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun scan-new-agenda-files ()
    (interactive)
    (message "Scanning new agenda files...")
    (setq org-agenda-files (directory-files-recursively "~/org/" "\.org$" nil nil t)))

  (with-eval-after-load 'org-agenda
    (scan-new-agenda-files)
    (define-key org-agenda-mode-map "m" 'org-agenda-month-view)
    (define-key org-agenda-mode-map "y" 'org-agenda-year-view))

  (spacemacs/set-leader-keys "aou" 'scan-new-agenda-files)
#+END_SRC
*** org-cv
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package ox-awesomecv
    :load-path "~/.spacemacs.d/private/org-cv"
    :init (require 'ox-awesomecv))
#+END_SRC
*** org-babel
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (python . t)
       (shell . t))))
#+END_SRC
*** org-journal
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org-journal
    (setq org-journal-dir "~/org/home/roam/journal/")
    (setq org-journal-date-format "%A, %m/%d/%Y")
    (setq org-journal-file-type 'monthly)
    (setq org-journal-file-format "%Y%m%d.org"))

  (spacemacs/set-leader-keys
    "aojj" (lambda () (interactive)
             (org-journal-new-entry nil)))
  (spacemacs/declare-prefix "aojj" "journal-home")
#+END_SRC
*** org-table
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org-mode
    (define-key org-mode-map (kbd "C-<tab>") 'org-table-previous-field))
#+END_SRC
*** org-todo
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (let ((capture-template  "* TODO %?\n%U\n%i\n%a"))
      (progn
        (setq org-todo-keywords
              '((sequence "TODO(t)" "IN_PROGRESS" "UNDER_REVEW" "|" "DONE(d)")
                (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
                (sequence "|" "INACTIVE(i)" "INCOMPLETE(n)" "CANCELED(c)" "REPORTED(R)")))
        (setq org-capture-templates
              '(("h" "Home" entry (file+headline "~/org/home/tasks.org" "Tasks")
                 "* TODO %?\n%U\n%i\n%a")
                ("w" "Work" entry (file+headline "~/org/work/tasks.org" "Tasks")
                 "* TODO %?\n%U\n%i\n%a")))
        (setq org-project-capture-capture-template capture-template))))
  (spacemacs/set-leader-keys
    "aoh" (lambda () (interactive) (find-file "~/org/home/tasks.org"))
    "aow" (lambda () (interactive) (find-file "~/org/work/tasks.org")))
  (spacemacs/declare-prefix "aoh" "Home tasks")
  (spacemacs/declare-prefix "aow" "Work tasks")
#+END_SRC
*** org-hugo
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "Th" 'org-hugo-auto-export-mode)
#+END_SRC
*** org-roam
**** Automatically sync the database
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(org-roam-db-autosync-mode)
#+END_SRC
**** Migrate the current buffer from org-roam v1 to v2
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun org-roam-migrate-current-buffer-v1-to-v2 ()
    (interactive)
    (org-roam-migrate-v1-to-v2))
#+END_SRC
*** org-clock
**** Save the clock history across Emacs sessions
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+END_SRC
*** Replace selected markdown region to org format
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun replace-markdown-region-with-org (beginning end)
    "Replace the selected markdown region with its corresponding org-mode format."
    (interactive "r")
    (if (use-region-p)
        (let ((tmp-buffer "Markdown To Org Tmp"))
          (pcase (shell-command-on-region (region-beginning) (region-end)
                                          "pandoc -f markdown -t org" tmp-buffer t)
            (0 (message "Successfully converted to org-mode format."))
            (127 (message "pandoc not found. Install it with 'sudo apt install pandoc'."))
            (_ (message "Failed to convert the selected region to org-mode format."))
            )
          )
      (message "No active region is found.")))
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "RR" 'replace-markdown-region-with-org)
#+END_SRC
*** ob-lean4
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package ob-lean4
    :load-path "~/.spacemacs.d/private/ob-lean4")
  (add-to-list 'org-babel-load-languages '(lean4 . t))
#+END_SRC

*** ob-cmake
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package ob-cmake
    :load-path "~/.spacemacs.d/private/ob-cmake")
  (add-to-list 'org-babel-load-languages '(cmake . t))
#+END_SRC
*** ob-rust
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (require 'ob-rust)
  (add-to-list 'org-babel-load-languages '(rust . t))
#+END_SRC

** Utility
*** beacon mode
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (beacon-mode 1)
#+END_SRC
*** Toggle clang-format on save
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun c-c++-toggle-clang-format-on-save ()
    (interactive)
    (cond
     (c-c++-enable-clang-format-on-save
      (message "[c-c++] disable clang-format on save")
      (setq c-c++-enable-clang-format-on-save nil))
     ((not c-c++-enable-clang-format-on-save)
      (message "[c-c++] enable clang-format on save")
      (setq c-c++-enable-clang-format-on-save t))
     ))

  (spacemacs/set-leader-keys-for-major-mode 'c-mode "Tf" 'c-c++-toggle-clang-format-on-save)
  (spacemacs/set-leader-keys-for-major-mode 'c++-mode "Tf" 'c-c++-toggle-clang-format-on-save)
  (spacemacs/declare-prefix-for-mode 'c-mode "Tf" "toggle-clang-format-on-save")
  (spacemacs/declare-prefix-for-mode 'c++-mode "Tf" "toggle-clang-format-on-save")
#+END_SRC
*** auto-indent
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; I want to disable pasting with formatting on C/C++ buffers
  (add-to-list 'spacemacs-indent-sensitive-modes 'c-mode)
  (add-to-list 'spacemacs-indent-sensitive-modes 'c++-mode)
#+END_SRC
*** format-all
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (add-hook 'sh-mode-hook #'format-all-mode)
  (add-hook 'fish-mode-hook #'format-all-mode)
  (add-hook 'cmake-mode-hook #'format-all-mode)
#+END_SRC
*** glow, the markdown viewer
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Configure glow viewer
  (defun start-glow-viewer ()
    (interactive)
    (start-process "glow-markdown-viewer" nil
                   "/usr/bin/x-terminal-emulator"
                   (file-truename "~/.spacemacs.d/scripts/glow_mk_viewer.sh")
                   (buffer-file-name nil)))
#+END_SRC
*** google-search
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Set google as default search engine and open links with xdg-open or open depending on the OS
  (spacemacs/set-leader-keys "ag" 'engine/search-google)
  (setq browse-url-browser-function 'browse-url-generic
        engine/browser-function 'browse-url-generic
        browse-url-generic-program (cond ((string-equal system-type "darwin") "open")
                                          ((string-equal system-type "gnu/linux") "xdg-open")))
#+END_SRC
*** Kill all buffers
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun nuke-all-buffers ()
    (interactive)
    (mapcar 'kill-buffer (buffer-list))
    (delete-other-windows))
  (global-set-key (kbd "C-x K") 'nuke-all-buffers)
#+END_SRC
*** ranger
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'ranger
    (define-key ranger-mode-map (kbd "M-h") 'ranger-prev-tab)
    (define-key ranger-mode-map (kbd "M-l") 'ranger-next-tab)
    (define-key ranger-mode-map (kbd "M-n") 'ranger-new-tab))
  (spacemacs/set-leader-keys "ar" 'ranger)
#+END_SRC
*** cheat.sh
The one and only one cheatsheet.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (spacemacs/declare-prefix "aa" "cheat-sh")

  ;; Prompt to select a topic to show its cheatsheet
  (spacemacs/set-leader-keys "aaa" 'cheat-sh)

  ;; Show the help page of cheat.sh
  (spacemacs/set-leader-keys "aah" 'cheat-sh-help)

  ;; Get the cheatsheet for the marked region
  (spacemacs/set-leader-keys "aar" 'cheat-sh-region)

  ;; Get a random page of cheatsheet
  (spacemacs/set-leader-keys "aad"
    (lambda ()
      (interactive)
      (cheat-sh ":random")))
  (spacemacs/declare-prefix "aad" "cheat.sh/:random")
#+END_SRC
*** chatgpt-shell
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package chatgpt-shell
    :load-path "~/.spacemacs.d/private/chatgpt-shell")
  (setq chatgpt-shell-openai-key
        (auth-source-pick-first-password :host "api.openai.com"))
#+END_SRC
** Workarounds
*** Workaround for the [[https://github.com/company-mode/company-mode/issues/383][bug]] where company-mode and evil-mode are conflicting
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (evil-declare-change-repeat 'company-complete)
#+END_SRC

*** Enable doom-modeline-icons in gui and disable them in terminal
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Enable doom-modeline-icons in gui and disable them in terminal
  ;; TODO: check if this is still working
  (defun enable-doom-modeline-icons()
    (setq doom-modeline-icon (display-graphic-p)))
  (defun enable-doom-modeline-icons-weird (_frame)
    ;; TODO: Don't know why this "not" is needed...
    (setq doom-modeline-icon (not (display-graphic-p))))
  (add-hook 'focus-in-hook
            #'enable-doom-modeline-icons)
  (add-hook 'after-make-frame-functions
            #'enable-doom-modeline-icons-weird)
#+END_SRC

*** Workaround for spammed false positive warning messages
Ticket: [[https://github.com/syl20bnr/spacemacs/issues/16575][syl20bnr/spacemacs#16575 ‘org-element-at-point’ cannot be used in non-Org buffer]]
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (add-to-list 'warning-suppress-types '(org-element org-element-parser))
#+END_SRC
