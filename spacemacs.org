#+TITLE: Spacemacs tangled user configuration
#+STARTUP: headlines
#+STARTUP: nohideblocks
#+STARTUP: indent
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args:emacs-lisp :comments link
* Introduction
This is a org file where its code snippets will be read by ~spacemacs~ for ~user-init~ and ~user-config~. It is inspired by [[https://github.com/ralesi/spacemacs.org][spacemacs.org]].
* user-init
All code snippets under this section will be added to ~dotspacemacs//user-init~
function, which is
#+begin_quote
Initialization function for user code.

It is called immediately after
~dotspacemacs/init~, before layer configuration executes. This function is mostly
useful for variables that need to be set before packages are loaded. If you are
unsure, you should try in setting them in `dotspacemacs/user-config' first.
#+end_quote
** ROS
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (defun spacemacs/update-ros-envs ()
    "Update all environment variables in `spacemacs-ignored-environment-variables'
  from their values currently sourced in the shell environment (e.g. .bashrc)"
    (interactive)
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-copy-envs spacemacs-ignored-environment-variables)
    (message "ROS environment copied successfully from shell"))


  ;; Ignore any ROS environment variables since they might change depending
  ;; on which catkin workspace is used. When a new catkin workspace is chosen
  ;; call `spacemacs/update-ros-envs' to update theses envs accordingly
  (setq-default spacemacs-ignored-environment-variables '("ROS_IP"
                                                          "PYTHONPATH"
                                                          "CMAKE_PREFIX_PATH"
                                                          "ROS_MASTER_URI"
                                                          "ROS_PACKAGE_PATH"
                                                          "ROSLISP_PACKAGE_DIRECTORIES"
                                                          "PKG_CONFIG_PATH"
                                                          "LD_LIBRARY_PATH"))
#+END_SRC
** Shell
Set shell to be ~bash~ explicitly because my default shell ~fish~ does not work along with spacemacs.
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq-default shell-file-name "/bin/bash")
#+END_SRC
* user-config
All code snippets under this section will be added to ~dotspacemacs//user-config~
function, which is
#+begin_quote
Configuration function for user code.

This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code.
#+end_quote
** IDE config
*** ccls
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (require 'ccls)
  (setq ccls-root-files (add-to-list 'ccls-root-files "build/compile_commands.json" t))
  (setq ccls-sem-highlight-method 'font-lock)
  (setq ccls-initialization-options
        (list :cache (list :directory (concat (file-name-as-directory spacemacs-cache-directory) ".ccls-cache") )
              :compilationDatabaseDirectory "build"))
  (setq ccls-executable (file-truename "~/.spacemacs.d/ccls/Release/ccls"))
#+END_SRC
*** cmake-ide
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; C++ build dir setting
  (put 'cmake-ide-dir 'safe-local-variable 'stringp)
  (put 'cmake-ide-make-command 'safe-local-variable 'stringp)
  (put 'cmake-ide-cmake-args 'safe-local-variable 'stringp)
#+END_SRC
*** company
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Autocompletion configuration
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2))
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-j") 'company-select-next)
    (define-key company-active-map (kbd "C-k") 'company-select-previous))
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))
#+END_SRC

*** dap
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))
  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))
#+END_SRC
*** flycheck
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'flycheck
    (setq flycheck-check-syntax-automatically '(save
                                                idle-buffer-switch
                                                mode-enabled)))
#+END_SRC
*** Indentation for web development
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (defun setup-web-dev-indent (n)
    ;; web development
    (setq coffee-tab-width n) ; coffeescript
    (setq javascript-indent-level n) ; javascript-mode
    (setq js-indent-level n) ; js-mode
    (setq js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
    (setq web-mode-markup-indent-offset n) ; web-mode, html tag in html file
    (setq web-mode-css-indent-offset n) ; web-mode, css in html file
    (setq web-mode-code-indent-offset n) ; web-mode, js code in html file
    (setq css-indent-offset n) ; css-mode
    )
  (setq prettier-js-args '("--single-quote"))
  (setup-web-dev-indent 2)
#+END_SRC
*** ROS
**** helm-ros
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; ROS shortcut
  (spacemacs/set-leader-keys "ye" 'spacemacs/update-ros-envs)
  (spacemacs/declare-prefix "y" "ROS")
  (spacemacs/set-leader-keys "yy" 'helm-ros)

  (spacemacs/declare-prefix "yt" "ROS topics")
  (spacemacs/set-leader-keys "ytt" 'helm-ros-topics)
  (spacemacs/set-leader-keys "ytz" 'helm-ros-rostopic-hz)
  (spacemacs/set-leader-keys "yti" 'helm-ros-rostopic-info)

  (spacemacs/declare-prefix "yn" "ROS nodes")
  (spacemacs/set-leader-keys "yni" 'helm-ros-rosnode-info)
  (spacemacs/set-leader-keys "ynn" 'helm-ros-rosnode-list)
  (spacemacs/set-leader-keys "ynd" 'helm-ros-kill-node)
  (spacemacs/set-leader-keys "ynr" 'helm-ros-run-node)

  (spacemacs/set-leader-keys "ym" 'helm-ros-set-master-uri)
#+END_SRC
**** roslaunch-jump
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package roslaunch-jump
    :load-path "~/.spacemacs.d/private/roslaunch-jump")
#+END_SRC
**** company-roslaunch
Autocompletion config for launch files.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package company-roslaunch
    :load-path "~/.spacemacs.d/private/company-roslaunch")
#+END_SRC
**** catkin-make
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package catkin-make
    :load-path "~/.spacemacs.d/private/catkin-make"
    :config (catkin-make-keybinding-setup))
#+END_SRC
*** semantic-mode
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Semantic mode
  (semantic-mode t)
#+END_SRC
*** Style for linux kernel development
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Linux kernel development
  (defun c-lineup-arglist-tabs-only (ignored)
    "Line up argument lists by tabs, not spaces"
    (let* ((anchor (c-langelem-pos c-syntactic-element))
           (column (c-langelem-2nd-pos c-syntactic-element))
           (offset (- (1+ column) anchor))
           (steps (floor offset c-basic-offset)))
      (* (max steps 1)
         c-basic-offset)))

  (add-hook 'c-mode-common-hook
            (lambda ()
              ;; Add kernel style
              (c-add-style
               "linux-tabs-only"
               '("linux" (c-offsets-alist
                          (arglist-cont-nonempty
                           c-lineup-gcc-asm-reg
                           c-lineup-arglist-tabs-only))))))
  (add-hook 'c-mode-hook
            (lambda ()
              (let ((filename (buffer-file-name)))
                ;; Enable kernel mode for the appropriate files
                (when (and filename
                           ;; TODO: avoid the harded coded path
                           (string-match (expand-file-name "~/Dev/kernels")
                                         filename))
                  (setq indent-tabs-mode t)
                  (setq show-trailing-whitespace t)
                  (c-set-style "linux-tabs-only")))))

#+END_SRC

** Miscellaneous
*** ~C-a~ for increasing number, ~C-x~ for descreasing number
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (evil-define-key 'normal global-map (kbd "C-a") 'evil-numbers/inc-at-pt)
  (evil-define-key 'normal global-map (kbd "C-x") 'evil-numbers/dec-at-pt)
#+END_SRC
*** Default python interpreter
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq python-shell-interpreter "/usr/bin/python3")
#+END_SRC
*** Disable spacemacs buffer warnings
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq spacemacs-buffer--warnings nil)
#+END_SRC
*** Find this file
Create binding to spacemacs.org file
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun spacemacs/find-config-file ()
    (interactive)
    (find-file (concat dotspacemacs-directory "/spacemacs.org")))

  (spacemacs/set-leader-keys "fec" 'spacemacs/find-config-file)
#+END_SRC
*** ~-~ for going to the first non-blank position of the previous line
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (evil-define-key 'normal global-map (kbd "-") 'evil-previous-line-first-non-blank)
#+END_SRC
*** helm-swoop
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq helm-swoop-use-fuzzy-match t)
  (setq helm-swoop-use-line-number-face t)
#+END_SRC
*** Keybinding for Zoom in / out
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (define-key (current-global-map) (kbd "C-+") 'spacemacs/zoom-frm-in)
  (define-key (current-global-map) (kbd "C--") 'spacemacs/zoom-frm-out)
#+END_SRC
*** Kill frame when pressing ~SPC q q~
The reason for this is that I mainly use emacs as a daemon and I don't want to close the daemon by accident.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (spacemacs/set-leader-keys "qq" 'spacemacs/frame-killer)
#+END_SRC
*** Make ~w~ in vim mode move to end of the word (not stopped by ~_~)
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol))
#+END_SRC
*** Smooth scrolling
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Scroll one line at a time (less "jumpy" than defaults)
  (when (display-graphic-p)
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
          mouse-wheel-progressive-speed nil))
  (setq scroll-step 1
        scroll-margin 0
        scroll-conservatively 100000)
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq-default dotspacemacs-themes '(doom-one))
#+END_SRC
*** Transparency settings
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (spacemacs/set-leader-keys "tt" 'spacemacs/toggle-transparency)
  (add-hook 'after-make-frame-functions 'spacemacs/enable-transparency)
#+END_SRC
*** Turn on xclip-mode
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (xclip-mode t)
#+END_SRC
*** Use windows key as meta key
It is meant to avoid conflicts with i3wm, where I use ~alt~ as the meta key.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq x-super-keysym 'meta)
#+END_SRC
*** Visiting a file uses its truename as the visited-file name
E.g. when visiting a soft/hard link.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq find-file-visit-truename t)
#+END_SRC
** org-mode
*** org-agenda
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq org-agenda-files (list "~/org/work.org"
                               "~/org/home.org"))
  (require 'org-agenda)
  (define-key org-agenda-mode-map "m" 'org-agenda-month-view)
  (define-key org-agenda-mode-map "y" 'org-agenda-year-view)
#+END_SRC
*** org-babel
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (require 'ob-python)
    (require 'ob-C)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (python . t)
       (shell . t))))
#+END_SRC
*** org-journal
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq org-journal-dir "~/org/journal/")
  (setq org-journal-file-type 'monthly)
#+END_SRC
*** org-reveal
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq org-reveal-root (file-truename "~/.spacemacs.d/reveal.js"))
#+END_SRC
*** org-table
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (define-key org-mode-map (kbd "C-<tab>") 'org-table-previous-field)
#+END_SRC
*** org-todo
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(d)")
          (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
          (sequence "|" "CANCELED(c)")))
  (setq org-capture-templates
        '(("h" "Home" entry (file+headline "~/org/home.org" "Tasks")
           "* TODO %?\n  %U\n  %i\n  %a")
          ("w" "Work" entry (file+headline "~/org/work.org" "Tasks")
           "* TODO %?\n  %U\n  %i\n  %a")))
#+END_SRC
** Utility
*** format-all
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (add-hook 'python-mode-hook #'yapf-mode)
  (add-hook 'sh-mode-hook #'format-all-mode)
  (add-hook 'fish-mode-hook #'format-all-mode)
  (add-hook 'cmake-mode-hook #'format-all-mode)
#+END_SRC
*** glow, the markdown viewer
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Configure glow viewer
  (defun start-glow-viewer ()
    (interactive)
    (start-process "glow-markdown-viewer" nil
                   "/usr/bin/x-terminal-emulator"
                   (file-truename "~/.spacemacs.d/scripts/glow_mk_viewer.sh")
                   (buffer-file-name nil)))
#+END_SRC
*** google-search
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Set google as default search engine
  (spacemacs/set-leader-keys "ag" 'engine/search-google)
  (setq browse-url-browser-function 'browse-url-generic
        engine/browser-function 'browse-url-generic
        browse-url-generic-program "xdg-open")
#+END_SRC
*** Kill all buffers
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun nuke-all-buffers ()
    (interactive)
    (mapcar 'kill-buffer (buffer-list))
    (delete-other-windows))
  (global-set-key (kbd "C-x K") 'nuke-all-buffers)
#+END_SRC
*** ranger
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (require 'ranger)
  (define-key ranger-mode-map (kbd "M-h") 'ranger-prev-tab)
  (define-key ranger-mode-map (kbd "M-l") 'ranger-next-tab)
  (define-key ranger-mode-map (kbd "M-n") 'ranger-new-tab)
  (spacemacs/set-leader-keys "ar" 'ranger)
#+END_SRC
** Workarounds
*** Workaround for the [[https://github.com/syl20bnr/spacemacs/issues/13100][bug]] where fuzzy matching is not used in recent files
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq completion-styles `(basic partial-completion emacs22 initials
                                  ,(if (version<= emacs-version "27.0") 'helm-flex 'flex)))
#+END_SRC
*** Workaround for the [[https://github.com/company-mode/company-mode/issues/383][bug]] where company-mode and evil-mode are conflicting
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (evil-declare-change-repeat 'company-complete)
#+END_SRC

*** Workaround for the [[https://github.com/syl20bnr/spacemacs/issues/10410][bug]] where evil search breaks spacemacs.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun kill-minibuffer ()
    (interactive)
    (when (windowp (active-minibuffer-window))
      (evil-ex-search-exit)))
  (add-hook 'mouse-leave-buffer-hook #'kill-minibuffer)
#+END_SRC

*** Setting part of a word to be bold, italics, underline, and strikethrough.

The visualization in org-mode can be wrong, which needs a fix.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setcar org-emphasis-regexp-components " \t('\"{[:alpha:]")
  (setcar (nthcdr 1 org-emphasis-regexp-components) "[:alpha:]- \t.,:!?;'\")}\\")
  (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
#+END_SRC

*** Enable doom-modeline-icons in gui and disable them in terminal
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Enable doom-modeline-icons in gui and disable them in terminal
  ;; TODO: check if this is still working
  (defun enable-doom-modeline-icons()
    (setq doom-modeline-icon (display-graphic-p)))
  (defun enable-doom-modeline-icons-weird (_frame)
    ;; TODO: Don't know why this "not" is needed...
    (setq doom-modeline-icon (not (display-graphic-p))))
  (add-hook 'focus-in-hook
            #'enable-doom-modeline-icons)
  (add-hook 'after-make-frame-functions
            #'enable-doom-modeline-icons-weird)
#+END_SRC
